addpath('curvature');

point_count = 100000;
seed = 52435234;

source_dir = '../data/shape_sources';
shape_dir = '../data/shapes_new';

% entire dataset
shape_names = {...
    'cube_uniform',...
    'flower',...
    'fandisk',...
    'bunny',...
    'armadillo',...
    'dragon_xyzrgb',...
    'boxunion_uniform',...
    'tortuga',...
    'yoda',...
    'galera',...
    'icosahedron',...
    'Cup33',...
    'Cup34',...
    'netsuke',...
    'sphere',...
    'cylinder',...
    };

noise_type = 'white';
min_noise = 0.0;
max_noise = 0.1;
noise_level_count = 11;
density_distribution = {{'uniform'}, {'minmax',1,0.01}, {'minmax_layers',30,0.1,10}};
% density_distribution = {{'minmax_layers',30,0.1,10}};

% % a subset of the dataset
% shape_names = {...
%     'flower',...
%     };
% % density_distribution = {{'uniform'}};
% density_distribution = {{'minmax',1,0.01}};
    
for s = 1:numel(shape_names)
    shape_name = shape_names{s};
    
    disp(['shape: ',shape_name])
    
    for ddist_ind = 1:numel(density_distribution)
        disp(['    density distribution: ',density_distribution{ddist_ind}{1}]);
        
        for noise_level=linspace(min_noise,max_noise,noise_level_count)

            disp(['        noise level: ',num2str(noise_level)]);

            source_filename = fullfile(source_dir,[shape_name,'.off']);
            
            shape_filename = fullfile(shape_dir,[shape_name,sprintf('%d',round(point_count/1000)),'k']);
            if noise_level > 0
                shape_filename = [shape_filename,'_noise_',noise_type,sprintf('_%.2e',noise_level)]; %#ok<AGROW>
            end
            if ~strcmp(density_distribution{ddist_ind}{1},'uniform')
                shape_filename = [shape_filename,'_ddist_',density_distribution{ddist_ind}{1}]; %#ok<AGROW>
            end
            
            if exist([shape_filename,'.xyz'],'file') == 2
                continue; % temp
                error(['Shape file ',shape_filename,' already exists, please remove manually for safety.']);
                % regenerating them would maybe mean they get differnt point
                % locations, and ground truth normals, so the current normals
                % generated by our models would need to be re-generated as well
                % (which takes a long time)
            end

            if noise_level == 0
                CloudFromOFF(source_filename ,point_count,shape_filename,[],[],seed, density_distribution{ddist_ind});
            else
                CloudFromOFF(source_filename ,point_count,shape_filename,noise_level,noise_type,seed, density_distribution{ddist_ind});
            end
            disp(['    generated file: ',shape_filename]);
        end
    end
end
    
